# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest node docker image to build and test this project.
image: node:alpine

# Docker in Docker (dind) allows this CI file to be run locally (assuming you have docker installed).
# Note this relies on a number of system variables on the local system. 
# TODO: Find an elegant way of setting these in a robust way without exposing them in a public file.
#
#    DOCKER_REGISTRY_USER_LOGIN, DOCKER_REGISTRY_USER, DOCKER_REGISTRY_HOST,  DOCKER_AUTH_CONFIG, 
#    CI_REGISTRY_PASS_LOGIN, CI_REGISTRY 

services:
  - docker:dind

  # cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
# cache:
#   paths:
#     - node_modules/

# before_script is used to define the command that should be run before all jobs, including deploy jobs, but after the restoration of artifacts.
# This can be an array or a multi-line string. In this case node install will install all our dependencies including the scripts
# before_script:
#   - npm ci

# stages is used to define the workflow. So in this example we have a 'test' stage followed by a 'deploy' stage.  What this means is first any jobs with a stage of test are
# run. Jobs of the same stage  may be run in parallel. If they succeed and then any jobs with a stage of 'deploy' are run.
#
# If we hadn't defined any stages then we could still have used the defaults of 'build' 'test' and 'deploy' for defining the jobs.
#
# (if you don't specify a stage in the job then it is assumed to be part of the 'test' stage)
stages:
  - dependencies
  - test
  - build
  - deploy

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

install_dependencies:
  stage: dependencies
  tags:
  - k8srunner
  script:
    - rm -rf node_modules && yarn install --frozen-lockfile
  cache:
    paths:
      - node_modules/
    policy: push

#Run the static code analysis
code_analysis:
  stage: test
  tags:
  - k8srunner
  cache:
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run code-analysis

# run the test coverage reports
test_and_coverage:
  stage: test
  tags:
  - k8srunner
  cache:
    paths:
      - node_modules/
    policy: pull
  script:
    - mkdir -p build/reports
    - npm run test
    - npm run code-analysis
    - npm run test:coverage
    - mv junit.xml build/reports/unit-tests.xml
    - mv linting.xml build/reports/linting.xml
    - mv build/coverage/cobertura-coverage.xml build/reports/code-coverage.xml

  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    paths:
      - build/

# list the current top level dependencies for the project
# TODO We could write a script to convert the json and
#      write it into something
list_dependencies:
  stage: test
  tags:
  - k8srunner
  allow_failure: true
  cache:
    paths:
      - node_modules/
    policy: pull
  script:
    - npm list --depth=0 --json >> npm_deps.json
    - npm list --depth=0  >> npm_deps.txt
    - mkdir .public
    - cp npm_deps.txt .public/
    - cp npm_deps.json .public/
  artifacts:
    paths:
      - .public

# Build the application
build:
  stage: build
  tags:
  - k8srunner
  cache:
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run-script build

# export the report
pages:
  stage: deploy
  tags:
  - k8srunner
  dependencies:
    - test_and_coverage
    - list_dependencies
    - code_quality
  script:
    - mv public/* .
    - cp -r build/* public
    - cp -r .public/* public
  artifacts:
    paths:
      - public
    expire_in: 30 days

include:
  - template: Code-Quality.gitlab-ci.yml